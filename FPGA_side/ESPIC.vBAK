module ESPIC(
		input wire CLK,
		input wire signal,
		input [15:0] in_op_node0,
		input [15:0] in_op_node1,
		input [1:0] exe_flag_task0,
		input [1:0] exe_flag_task1,
		output wire out_IRQ0,
		output wire [1:0] out_IRQ1,
		output wire out_IRQ2_node0,
		output wire out_IRQ2_node2
		);
		
		
		// IRQ scheduler priority
		
		localparam [2:0] priority_mcu0 = 2;
		localparam [2:0] priority_mcu1 = 4;
		
		reg [31:0] counter_IRQ0;
		reg [31:0] counter_IRQ1 = 0;
		reg [31:0] counter_IRQ2;
		reg [31:0] counter_wait_mcu0;
		reg [31:0] counter_wait_mcu1;
		reg IRQ2_stop_flag = 0;
		reg [1:0] next_IRQ1 = 0;
		
		initial counter_IRQ0      = 0;
		//initial counter_IRQ1      = 0;
		initial counter_IRQ2      = 0;
		initial counter_wait_mcu0 = 0;
		initial counter_wait_mcu1 = 0;
		
		reg  sched_mcu_id = 0;
	
	
	
		always @ (posedge CLK) begin
		
			counter_IRQ0 <= counter_IRQ0 + 1;
			if(counter_IRQ0 <= 11000000)  begin
				counter_IRQ0 <= counter_IRQ0 + 1;
			end
			else begin
				counter_IRQ0 <= 0;
			end		
			
		end 
		
		always @(*) begin
			if(counter_IRQ0 <= 10000000) begin
				out_IRQ0 <= 0;
	
			end
			else if(counter_IRQ0 > 10000000)  begin
				out_IRQ0 <= 1;
			end
		end
		
		
		always @ (posedge CLK) begin
		
			if((out_IRQ2_node0 == 1)  || (out_IRQ0 == 1)  || (out_IRQ1 == 1)) begin
				counter_wait_mcu0 <= 0;
			end 
			else begin
				counter_wait_mcu0 <= counter_wait_mcu0 + priority_mcu0;
			end
		end 
		
		always @ (posedge CLK) begin
			if((out_IRQ2_node2 == 1) || (out_IRQ1 == 2)) begin
				counter_wait_mcu1 <= 0;
			end 
			else begin
				counter_wait_mcu1 <= counter_wait_mcu1 + priority_mcu1;
			end
		end 
		
		// ---- IRQ SCHEDULER -----------------------------------
		
		 
		 always @ (*) begin
		 /*
		 if(signal == 1) begin
			out_IRQ1_mcu1 <= 1;
		 end
		 else begin
			out_IRQ1_mcu1 <= 0;
		 end
		 end
		 */
		
			if(signal == 1) begin
				if (counter_wait_mcu0 >= counter_wait_mcu1) begin
					next_IRQ1 <= 1;

				end
				else begin
					next_IRQ1 <= 2;
				end
			end 
			else  begin
				next_IRQ1 <= 0;
			end
			
		 
		 end
		 
		  always @(CLK) begin
		  
				if(out_IRQ1 != 0 ) begin
					counter_IRQ1 <= counter_IRQ1 + 1;
				end 
				else begin
					counter_IRQ1 <= 0;

				end
		  
		  end

//-------------------------------------------------------
	/*	
		always @ (*) begin
			case(in_op_node0 & 16'b0000111111111111)
			
				16'b000011110000001 : begin // Send IRQ to process 0
					if(exe_flag_task0[0] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node0 <= 1;
						out_IRQ2_node2 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node0 <= 0;
						out_IRQ2_node2 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					
					if(exe_flag_task0[1] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node2 <= 1;
						out_IRQ2_node0 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
				end
				16'b000011110000010 : begin // Send IRQ to process 1
					if(exe_flag_task1[0] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node0 <= 1;
						out_IRQ2_node2 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node0 <= 0;
						out_IRQ2_node2 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					
					if(exe_flag_task1[1] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node2 <= 1;
						out_IRQ2_node0 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
				end
				
				default : begin
					out_IRQ2_node2 <= 0;
					out_IRQ2_node0 <= 0;
				end
			
			endcase
			
			case(in_op_node1 & 16'b0000111111111111)
			
				16'b000011110000001 : begin // Send IRQ to process 0
					if(exe_flag_task0[0] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node0 <= 1;
						out_IRQ2_node2 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node0 <= 0;
						out_IRQ2_node2 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					
					if(exe_flag_task0[1] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node2 <= 1;
						out_IRQ2_node0 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
				end
				16'b000011110000010 : begin // Send IRQ to process 1
					if(exe_flag_task1[0] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node0 <= 1;
						out_IRQ2_node2 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node0 <= 0;
						out_IRQ2_node2 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					
					if(exe_flag_task1[1] && IRQ2_stop_flag == 0) begin
						out_IRQ2_node2 <= 1;
						out_IRQ2_node0 <= 0;
					end
					else if(IRQ2_stop_flag == 1) begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
					else begin
						out_IRQ2_node2 <= 0;
						out_IRQ2_node0 <= 0;
					end
				end
				
				default : begin
					out_IRQ2_node2 <= 0;
					out_IRQ2_node0 <= 0;
				end
			
			endcase
		end
		
		always @ (posedge CLK) begin
			if(out_IRQ2_node0 == 1 || out_IRQ2_node2 == 1) begin
				counter_IRQ2 <= counter_IRQ2 + 1;	
			end 
			else begin
				counter_IRQ2 <= 0;
			end
		end 
		
		always @ (posedge CLK) begin
			if(counter_IRQ2 <= 100) begin
				IRQ2_stop_flag = 0;
			end else begin
				IRQ2_stop_flag = 1;
			end
		end


*/		
		
		assign out_IRQ1 = next_IRQ1;
endmodule
